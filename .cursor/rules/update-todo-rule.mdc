---
description: 
globs: TODO
alwaysApply: false
---
When updating or creating TODO documents:

Structure Requirements:
1. Every TODO must reference a design document ("the guiding design doc") and a set of related documents formated like the example: 

## Related Documents

- [ServiceLayer-AssetService.md](mdc:documents/ServiceLayer-AssetService.md) - Complete implementation details
- [ServiceLayer-Overview.md](mdc:documents/ServiceLayer-Overview.md) - Architecture context
- [EventBusService.ts](mdc:src/services/EventBusService.ts) - Event system integration 

2. Document Structure:
   - Single Header (Level 2 - ##)
   - Multiple Phases
   - Steps within Phases
   - Tasks within Steps

Formatting Rules:
Header:
- Use Level 2 heading (##)
- Title must reference the associated design document
- Must include a description section below header containing:
  * How the feature fits in the architecture
  * Feature's purpose
  * Reference to the guiding design doc location

Phases:
- Must be indexed numerically
- Represent logical, modular components
- Phase headings wrapped in ** (bold)
- Example: "### Phase 1: Core Framework **"

Steps:
- Numbered list indented under each phase
- Example:
  1. **Step Name**
     - Task 1
     - Task 2

Tasks:
- Bulleted list indented under each step
- Specific, actionable items

Progress Tracking Rules:
1. Task Completion:
   - Add ✅ to completed tasks
   - Example: "- Implement cache system ✅"

2. Step Completion:
   - When all tasks under a step are complete:
     * Add ✅ to the step
     * Remove all task items under that step
   - Example: "1. **Cache Implementation** ✅"

3. Phase Completion:
   - When all steps under a phase are complete:
     * Add ✅ to the phase
     * Remove all step items under that phase
   - Example: "### Phase 1: Core Framework ✅"

Update Process:
1. Update TODO file with progress markers
2. Search for and update the guiding design doc to reflect progress
3. After completing a phase:
   - Update guiding design doc
   - Review entire codebase
   - Validate implementation plan
   - Reassess task priorities and effectiveness
   - Update TODO if priorities or tasks need adjustment

Example Format:
```
## AssetService Implementation Plan

This feature implements the core asset management system for our game engine.
It handles loading, caching, and memory management of game assets.
See design doc: /docs/asset-service-design.md

### Phase 1: Core Framework ✅

### Phase 2: Basic Loading System
1. **Asset Loading Interface**
   - Define base loader interface
   - Implement texture loader
   - Add audio loader

2. **Error Handling** ✅
```