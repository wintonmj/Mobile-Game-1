---
description: 
globs: 
alwaysApply: true
---
When a message contains "git commit":

You as 'the agent'

1. return a runnable response that allows me run 'git status'
    1.1 The agent should Analyse changes seen from 'git status' response
        Identify files modified, added, and deleted
        Examine the nature of code changes in each file
        Detect patterns across changes (e.g., refactoring, bug fixes, new features)
        Identify potential impact areas
2. The agent should create a one-line summary that will be used in the upcoming commit message
    format:
        [type]: [concise description of change]
        Types include:
        feat: New feature
        fix: Bug fix
        refactor: Code refactoring without functionality change
        style: Code style/formatting changes
        docs: Documentation changes
        test: Adding or modifying tests
        perf: Performance improvements
        chore: Maintenance tasks, dependency updates, etc.
3. The agent should create a Detailed summary that will be used in the upcoming commit message
     format:
        What changes were made (technical details)
        Why these changes were necessary (context)
        How they benefit the project:
        Code quality improvements
        Performance enhancements
        Bug elimination
        New functionality
        Maintainability improvements
        Testing improvements

4. The agent should create the full commit message to be used
    EXAMPLE:
        feat: implement shared animation loader utility
        Improved code organization by:
        Creating a shared PhaserLoader utility following MVC architecture
        Centralizing animation loading logic to reduce duplication
        Adding proper TypeScript types for animation assets
        Ensuring compatibility across player and NPC components
        Reducing total code by 15% while improving readability

4. Return a runnable response that allows me to edit the commit message in the context window and do the following in one click: 
    4.1 git add .  
    4.2 git commit -m "<message from above following the example format>"

5. Return a runnable response that allows me to 'git push'
