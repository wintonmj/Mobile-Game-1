---
description: Message contains "git commit"
globs: 
alwaysApply: false
---
---
description: Provides a structured workflow for handling git commit operations with standardized messaging and documentation updates
globs: 
alwaysApply: true
---
# Git Commit Rule

## Description
This rule provides a structured workflow for handling git commit operations, ensuring consistent commit message formatting and proper documentation updates. It standardizes the commit process across the project, reducing errors and improving code quality through automated checks and standardized messaging.

## Trigger Conditions
- Message contains "git commit"

## Implementation Guidelines
1. Run npm run check to verify code quality and tests
2. Execute git status to show current state
3. Generate commit message components:
   - One-line summary
   - Detailed summary
   - Impact statement
4. Execute git operations in sequence:
   - git add .
   - git commit with formatted message
   - git push
5. Update [TODO](mdc:TODO) documentation post-push
5. Update [CHANGELOG.md](mdc:docs/CHANGELOG.md) documentation post-push with the commit data

## Examples
```
User: "git commit"
Agent: [Runs npm run check]
Agent: [Executes git status]
Agent: [Generates commit message]
    'Add new feature X'
    'Implemented feature X with Y and Z components'
    'This change improves user experience by...'
Agent: [Executes git operations]
Agent: [Updates [TODO](mdc:TODO) documentation]
Agent: [Updates [CHANGELOG.md](mdc:docs/CHANGELOG.md) documentation]
```

## Best Practices
- Always include all three message components
- Ensure commit messages are descriptive and meaningful
- Keep one-line summaries under 50 characters
- Update documentation promptly after push
- Verify git operations complete successfully
- Run checks before committing to ensure code quality

## Integration
- Works in conjunction with update-todo-rule
- Follows code-style guidelines for documentation
- Maintains consistency with design documentation

## Version Control
- Track rule changes in version control (v1.0.0)
- Document rule updates in CHANGELOG.md
- Maintain rule history
- Include rule version number in documentation

## Success Metrics
- Commit message quality (100% completion of all three components)
- Documentation update rate (within 24 hours of commit)
- Code quality check pass rate (100% before commit)
- Git operation success rate (100% for all operations)
- User adoption rate (measured through commit message compliance)

## Accessibility
- Clear, structured commit message format with consistent spacing
- Automated checks reduce manual errors through pre-commit hooks
- Standardized process for all team members with visual workflow diagrams
- Clear error messages and feedback with specific resolution steps
- Documentation updates ensure knowledge sharing through automated reminders
- Color-coded status indicators for different commit stages
- Screen reader compatible commit message templates
