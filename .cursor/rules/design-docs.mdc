---
description: 
globs: documents/*.md
alwaysApply: false
---
Rule Name: design-docs.mdc

General rules: 

When creating code:
- Keep samples high level and psudo coded
- Only include coded snippets for interfaces and integrations with existing components in ./src folder
- Define method and function names and use case but do not impliment them in this doc

Description:
# Design Document Creation Guidelines

## Purpose
This rule defines the structure and format for creating design documents in our mobile game project.

## Document Types
1. **Overview Documents** - High-level system architecture (e.g., ServiceLayer-Overview.md)
2. **Component Documents** - Detailed component design (e.g., ServiceLayer-AssetService.md)
3. **Implementation Documents** - Completed designs (stored in /Implemented)

## Required Sections

### All Design Documents Must Include:
1. **Title** - Clear component/system name as H1
2. **Problem Statement** - Numbered list of specific issues being addressed
3. **Solution Approach/Overview** - High-level solution description
4. **Component Design** - Detailed structure and interfaces
5. **Test-Driven Development Approach** - Test plan with sample test cases
6. **Implementation Plan** - Phased approach with timeline estimates

### Component Documents Must Also Include:
1. **Role in Architecture** - How it fits into the larger system
2. **Interface Definition** - TypeScript interfaces with JSDoc comments
3. **Integration Points** - How it interacts with other systems

## Section Structure

### Problem Statement Format:
```markdown
## Problem Statement

Our mobile game architecture currently suffers from:

1. **Issue Name** - Detailed description of the problem
2. **Issue Name** - Detailed description of the problem
3. **Issue Name** - Detailed description of the problem
```

### Interface Definition Format:
```markdown
## Interface Definition

```typescript
export interface IServiceName {
  // Method groups
  methodName(param: Type): ReturnType;
  methodName2(param: Type): ReturnType;
  
  // Next method group
  anotherMethod(param: Type): ReturnType;
}

export enum RelatedEnum {
  VALUE1 = 'value1',
  VALUE2 = 'value2'
}
```
```

### Test-Driven Development Format:
```markdown
## Test-Driven Development Approach

### 1. Test Plan

We'll implement the Component using TDD with these test categories:

1. **Category Name**
   - Specific test case (no implementation in this doc)
   - Specific test case (no implementation in this doc)
   - Specific test case (no implementation in this doc)

2. **Category Name**
   - Specific test case (no implementation in this doc)
   - Specific test case (no implementation in this doc)

## Implementation Status Indicators

- **Planned** - Design only, not yet implemented
- **In Progress** - Currently being implemented
- **âœ“ Implemented** - Completed (move to /Implemented directory)
- **Deprecated** - No longer relevant (include explanation)

## Document Storage

- **In Progress**: Root of design docs folder
- **Implemented**: Move to /Implemented with any updates
- **Complex Systems**: Group in subdirectories
- **Deprecated**: Move to /Archived with explanation

## Formatting Conventions

1. Use **Markdown** for all documentation
2. Include **TypeScript interfaces/code examples**
3. Use **bulleted lists** for feature points
4. Include **numbered lists** for sequential items
5. Format interfaces with **JSDoc-style comments**
6. Structure code examples with arrange-act-assert pattern

## Final Checklist

Before submitting a design document, ensure it:
- Follows the required section structure
- Includes TypeScript interfaces for all components
- Contains concrete test examples
- Specifies implementation phases
- Defines integration points with other systems
- Addresses all items in the problem statement
- Uses consistent formatting throughout